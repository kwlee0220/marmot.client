apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
 
group = 'etri'
version = '5.11.03'

sourceCompatibility = JavaVersion.VERSION_1_8;
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'


buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
	}
}

repositories {
    mavenLocal()
	maven {
		url "http://www.datanucleus.org/downloads/maven2/"
	}
	maven {
		url "http://download.osgeo.org/webdav/geotools/"
	}
    mavenCentral()
	maven {
		url "http://repo.boundlessgeo.com/main/"
	}
}


ext.geotools_version = '17.2'

dependencies {
	compile project(':utils')
	compile project(':marmot.common')

	compile	"org.geotools:gt-swt:${geotools_version}"
	compile group: 'com.monitorjbl', name: 'xlsx-streamer', version: '1.2.1'
	
	testCompile "junit:junit:4.12"
}

shadowJar {
	classifier 'all'
	
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}


// 다른 라이브러리들과 conflict가 발생하는 경우 이 shadow jar를 사용한다.
// 이것을 사용하면 xxx-all.jar 대신 xxx-shadowed.jar 가 생성된다.
//shadowJar {
//	classifier 'shadowed'
//	
//	mergeServiceFiles()
//	
//	exclude 'META-INF/*.SF'
//	exclude 'META-INF/*.DSA'
//	exclude 'META-INF/*.RSA'
//	
//	relocate 'com.google.common', 'shadow.com.google.common'
//	relocate 'io.netty', 'shadow.io.netty'
//}


task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

javadoc {
	source sourceSets.main.allJava
	
	title = 'Marmot API Document'
	
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
	options.links = ['https://docs.oracle.com/javase/8/docs/api/']
}
task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
	archives shadowJar
}

apply plugin: 'maven-publish'
publishing {
	publications {
		main(MavenPublication) {
			artifact jar
			artifact sourceJar
			artifact javadocJar
			artifact shadowJar
		}
	}
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
		}
	}
}