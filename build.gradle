apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'nebula-aggregate-javadocs'	// gradle aggregateJavadocs
 
group = 'etri'
version = '20.02.12'

sourceCompatibility = JavaVersion.VERSION_1_8;
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'


buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
		classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
	}
}

repositories {
    mavenLocal()
	maven {
		url "http://www.datanucleus.org/downloads/maven2/"
	}
	maven {
		url "http://repo.osgeo.org/repository/release/"
	}
    mavenCentral()
}

ext.geotools_version = '19.3'
ext.kafka_2_11_version = '1.0.0'
ext.zkclient_version = '0.11'

dependencies {
	compile project(':utils')
	compile project(':marmot.common')

	compile group: 'com.monitorjbl', name: 'xlsx-streamer', version: '1.2.1'
	
	// ZooKeeper & Kafka
	compile group: 'com.101tec', name: 'zkclient', version: "${zkclient_version}"
	compile group: 'org.apache.kafka', name: 'kafka_2.11', version: "${kafka_2_11_version}"
	
	testCompile "junit:junit:4.12"
}

shadowJar {
	classifier 'all'
	
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
	
	relocate 'com.fasterxml', 'shadow.com.fasterxml'
	relocate 'org.apache.http', "shadow.org.apache.http"	// 포도 업체때문에 conflict를 회피하려고
}


// 다른 라이브러리들과 conflict가 발생하는 경우 이 shadow jar를 사용한다.
// 이것을 사용하면 xxx-all.jar 대신 xxx-shadowed.jar 가 생성된다.
//shadowJar {
//	classifier 'shadowed'
//	
//	mergeServiceFiles()
//	
//	exclude 'META-INF/*.SF'
//	exclude 'META-INF/*.DSA'
//	exclude 'META-INF/*.RSA'
//	
//	relocate 'com.google.common', 'shadow.com.google.common'
//	relocate 'io.netty', 'shadow.io.netty'
//}


task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

javadoc {
	source sourceSets.main.allJava
	
	title = 'Marmot API Document'
	
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
	options.links = ['https://docs.oracle.com/javase/8/docs/api/']
}
task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
	archives shadowJar
}

publishing {
	publications {
		marmotClient(MavenPublication) {
			from components.java
			
			artifact sourceJar
			artifact javadocJar
			artifact shadowJar
		}
	}
}

ext.distDir = "${System.env.HOME}/etc/marmot/marmot.client.dist"
task distributeBinary(type:Copy) {
	dependsOn assemble
	into "${distDir}"
	from ("${projectDir}") {
		include 'bin/**'
		include 'lib/**'
		include 'log4j.properties'
		include '.gitignore'
	}
	from "${buildDir}/libs/${archivesBaseName}-${version}-javadoc.jar"
}

apply plugin: 'maven-publish'
publishing {
	publications {
		main(MavenPublication) {
			artifact jar
			artifact sourceJar
			artifact javadocJar
		}
	}
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						entry.output = 'classes'
					}
				}
			}
		}
	}
}
