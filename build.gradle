plugins {
	id 'java-library'
	id 'eclipse'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
	id 'maven-publish'
}
 
group = 'etri'
version = '20.02.12'

sourceCompatibility = '17'
targetCompatibility = '17'
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
	mavenLocal()
	maven {
		url "http://www.datanucleus.org/downloads/maven2/"
		allowInsecureProtocol = true
	}
	maven {
		url "https://repo.osgeo.org/repository/release/"
		allowInsecureProtocol = true
	}
	mavenCentral()
}

ext {
	logback_version = '1.3.14'
	gson_version = '2.10.1'
	
	picocli_version = '3.9.6'
	
	httpclient_version = '4.5.6'
	
	kafka_2_11_version = '1.0.0'
	zkclient_version = '0.11'
	
	xlsx_streamer_version = '1.2.1'
}

dependencies {
	implementation project(':utils')
	implementation project(':utilsx')
	implementation project(':marmot.common')

	// Logback
	implementation "ch.qos.logback:logback-classic:${logback_version}"
	
	// GSon
	implementation "com.google.code.gson:gson:${gson_version}"
	
	// command line parser
	implementation "info.picocli:picocli:${picocli_version}"

	implementation "com.monitorjbl:xlsx-streamer:${xlsx_streamer_version}"
	
	implementation "org.apache.httpcomponents:httpclient:${httpclient_version}"
}

shadowJar {
//	classifier 'all'
	
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
	
	relocate 'com.fasterxml', 'shadow.com.fasterxml'
	relocate 'org.apache.http', "shadow.org.apache.http"	// 포도 업체때문에 conflict를 회피하려고
}

task sourceJar(type: Jar) {
	from sourceSets.main.allSource
}

javadoc {
	source sourceSets.main.allJava
	
	title = 'Marmot API Document'
	
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
	options.links = ['https://docs.oracle.com/javase/8/docs/api/']
}
task javadocJar(type: Jar) {
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
	archives shadowJar
}

publishing {
	publications {
		marmotClient(MavenPublication) {
			from components.java
			
			artifact sourceJar
			artifact javadocJar
			artifact shadowJar
		}
	}
}

ext.distDir = "${System.env.HOME}/etc/marmot/marmot.client.dist"
task distributeBinary(type:Copy) {
	dependsOn assemble
	into "${distDir}"
	from ("${projectDir}") {
		include 'bin/**'
		include 'lib/**'
		include '.gitignore'
	}
	from "${buildDir}/libs/${archivesBaseName}-${version}-javadoc.jar"
}

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'build/classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.contains('/test/') ) {
							entry.output = 'build/test_classes'
						}
						else {
							entry.output = 'build/classes'
						}
					}
				}
			}
		}
	}
}